https://leetcode.com/problems/maximum-subarray/
class Solution {
    public int maxSubArray(int[] nums) {

         int maxSum =0;
         int currentsum=0;
    for(int i=0; i<nums.length; i++){
        for(int j=i; j< nums.length;j++){
             currentsum+=nums[j];
            if(currentsum>maxSum){
                maxSum=currentsum;
            }
            //if(currentsum<0){currentsum=0;}
        }
        currentsum=0;
    }
    return maxSum;
    }

}
-------------------------------
Search Insert Position

class Solution {
    public int searchInsert(int[] nums, int target) {
        
        int found = Arrays.binarySearch(nums, target);
        
        if(found>=0){
            return found;
        }else{
               int  low=0; 
                int high=nums.length-1; 
               int  mid=low+high/2; 
                // 1 3 5 7 8 9 10 12 15  9 target : 13 low 4
                if(target<nums[0]){
                     System.out.println("here");
                    return 0;
                   
                }if(target>nums[nums.length-1]){

                      System.out.println("here1");
                    return nums.length;
                }
          
            if(nums[mid] > target){
              
               while(nums[mid]>target){
                high=mid; 
                mid=low+high/2;
                  System.out.println(mid);
               }
               return mid+1;
            }else{
                 
                while(nums[mid]<target){ 
                low=mid; 
                mid=low+high/2;
               }
               System.out.println(mid);
               return mid-1;
            }
        }
        
        
    }
}
